@page "/chat"
@inject YandexGptService GptService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<div class="chat-container">
    <div class="chat-header">
        <h3>Консультант по направлению </h3>
        <button @onclick="GoBack" class="btn-back">← Назад</button>
    </div>

    <div class="messages" @ref="messagesContainer">
        @foreach (var message in messages)
        {
            <div class="message @message.CssClass">
                <div class="message-content">
                    @if (message.IsUser)
                    {
                        <span class="user-icon">👤</span>
                    }
                    else
                    {
                        <span class="ai-icon">🤖</span>
                    }
                    <div class="text">@message.Text</div>
                </div>
                <div class="message-time">@message.Timestamp.ToString("HH:mm")</div>
            </div>
        }
        @if (isLoading)
        {
            <div class="message ai">
                <div class="message-content">
                    <span class="ai-icon">🤖</span>
                    <div class="typing-indicator">
                    </div>
                </div>
            </div>
        }
    </div>

    <EditForm Model="@inputModel" OnSubmit="@SendMessage">
        <div class="input-area">
            <InputTextArea @bind-Value="inputModel.Message" 
                           placeholder="Задайте вопрос о направлении..."
                           disabled="@isLoading"
                           class="form-control" 
                           @onkeydown="HandleKeyDown" />
            <button type="submit" disabled="@(isLoading || string.IsNullOrWhiteSpace(inputModel.Message))">
                Отправить
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "direction")]
    public string? Direction { get; set; }

    private readonly List<ChatMessage> messages = new();
    private bool isLoading;
    private ElementReference messagesContainer;
    private string systemPrompt;

    // Модель для формы ввода
    public class ChatInputModel
    {
        public string? Message { get; set; }
    }
    
    private ChatInputModel inputModel = new ChatInputModel();

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Direction))
        {
            systemPrompt = $"Ты консультант по направлению обучения '{Direction}'. " +
                           "Отвечай только на вопросы, связанные с этим направлением. " +
                           "Отвечай на русском языке.";
        }
    }

    // Модель сообщения
    private class ChatMessage
    {
        public string Text { get; }
        public bool IsUser { get; }
        public DateTime Timestamp { get; }
        public string CssClass => IsUser ? "user" : "ai";

        public ChatMessage(string text, bool isUser)
        {
            Text = text;
            IsUser = isUser;
            Timestamp = DateTime.Now;
        }
    }

    // Отправка сообщения
    private async Task SendMessage()
    {
        if (isLoading) return;
        if (string.IsNullOrWhiteSpace(inputModel.Message)) return;
        
        // Добавляем сообщение пользователя
        var userMessage = inputModel.Message;
        messages.Add(new ChatMessage(userMessage, true));
        Console.WriteLine($"SendMessage called. Message: {inputModel.Message}");
        // Очищаем поле ввода
        inputModel.Message = "";
        
        // Запрос к нейросети
        isLoading = true;
        StateHasChanged(); // Обновляем UI для показа индикатора
        
        try
        {
            var currentPrompt = string.IsNullOrWhiteSpace(systemPrompt)
            ? $"Ты консультант по направлению обучения '{Direction}'. Отвечай только на вопросы, связанные с этим направлением. Отвечай на русском языке."
            : systemPrompt;

            // Добавляем диагностику
            Console.WriteLine($"Sending to YandexGPT: SystemPrompt='{currentPrompt}', UserMessage='{userMessage}'");
            var response = await GptService.GetResponseAsync(currentPrompt, userMessage);
            messages.Add(new ChatMessage(response, false));
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage($"Ошибка: {ex.Message}", false));
        }
        finally
        {
            isLoading = false;
            
        }
    }

    // Обработка клавиши Enter
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }


    // Назад к направлениям
    private void GoBack() => Navigation.NavigateTo("/");

    // Очистка при выходе
    public void Dispose()
    {
        messages.Clear();
    }
}
