@page "/"
@using CheckSpecialtiesUsingTheUnifiedStateExam.Components.Models
@using CheckSpecialtiesUsingTheUnifiedStateExam.Components.Data
@inject NavigationManager Navigation
@inject AdmissionService AdmissionService
@rendermode InteractiveServer

<div class="left-sidebar">
    <img src="/logo.png" alt="Логотип" class="logo-image" />
    <div class="sidebar-item">
        <!-- Левая колонка - ввод данных -->
        
        <h3>Ввод баллов ЕГЭ</h3>

        <div class="card">
            <div class="card-body">
                @for (int i = 0; i < 3; i++)
                {
                    var index = i; // Локальная переменная для каждой итерации
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Предмет @(index + 1)</label>
                            <select class="form-select" @bind="SelectedSubjects[index]">
                                <option value="">Выберите предмет</option>
                                @foreach (var subject in AvailableSubjects)
                                {
                                    <option value="@subject">@subject.ToString()</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Баллы</label>
                            <input type="number"
                                    class="form-control"
                                    min="0"
                                    max="100"
                                    @bind="Scores[index]" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="sidebar-item">
        <div class="input-group mb-3">
            <span class="input-group-text">Минимальный балл:</span>
            <input type="number" class="form-control" @bind="MinPassingScore" min="0" />
        </div>

        <button class="btn btn-primary mb-3" @onclick="Calculate">
            Показать специальности
        </button>
    </div>
</div>


<div class="container mt-4">
    <div class="right-page">
        <div class="row">
        

            <!-- Правая колонка - результаты -->
            <div class="col-md-6">
                <h3>Подходящие специальности</h3>

                

                @if (MatchingSpecialties == null)
                {
                    <div class="alert alert-info">
                        Введите баллы и нажмите кнопку
                    </div>
                }
                else if (!MatchingSpecialties.Any())
                {
                    <div class="alert alert-warning">
                        Подходящих специальностей не найдено
                    </div>
                }
                else
                {
                    <div class="list-group">
                        @foreach (var spec in MatchingSpecialties.OrderBy(s => s.PassingScore))
                        {
                            var totalScore = CalculateTotalScore(spec);
                            <div class="list-group-item">
                                <h5>@spec.Name</h5>
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <span>Проходной балл: @spec.PassingScore</span>
                                        <div class="text-muted small mt-1">
                                            @string.Join(", ", spec.RequiredSubjects)
                                        </div>
                                    </div>
                                    <span>Институт: @spec.Institute</span>
                                    <div>
                                        @if (totalScore.HasValue)
                                        {
                                            <span class="badge @GetScoreBadgeClass(totalScore.Value, spec.PassingScore)">
                                                @totalScore.Value баллов
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">
                                                Нет данных
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <button @onclick="() => OpenChat(spec.Id)" class="chat-btn">
                                Спросить о направлении
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    // Данные пользователя
    private Subject?[] SelectedSubjects { get; set; } = new Subject?[3];
    private int?[] Scores { get; set; } = new int?[3];

    // Результаты
    private List<AdmissionSpecialty>? MatchingSpecialties { get; set; }
    private int MinPassingScore { get; set; } = 200;

    // Список доступных предметов
    private List<Subject> AvailableSubjects { get; } = Enum.GetValues<Subject>().ToList();

    private void OpenChat(int directionId)
    {
        // Можно передать название направления как параметр
        Navigation.NavigateTo($"/chat?id={directionId}");
    }

    private void Calculate()
    {
        // Собираем введенные данные в словарь
        var userScores = new Dictionary<Subject, int>();

        for (int i = 0; i < 3; i++)
        {
            // Проверяем границы массива
            if (i < SelectedSubjects.Length &&
                i < Scores.Length &&
                SelectedSubjects[i].HasValue &&
                Scores[i].HasValue)
            {
                userScores[SelectedSubjects[i]!.Value] = Scores[i]!.Value;
            }
        }

        MatchingSpecialties = AdmissionService.GetMatchingSpecialties(
            userScores,
            MinPassingScore
        );
    }

    // Упрощенный расчет общего балла
    private int? CalculateTotalScore(AdmissionSpecialty spec)
    {
        int total = 0;

        foreach (var subject in spec.RequiredSubjects)
        {
            // Находим балл для предмета
            int? score = null;

            for (int i = 0; i < 3; i++)
            {
                if (i < SelectedSubjects.Length &&
                    i < Scores.Length &&
                    SelectedSubjects[i] == subject &&
                    Scores[i].HasValue)
                {
                    score = Scores[i];
                    break;
                }
            }

            // Если балл не найден - возвращаем null
            if (!score.HasValue)
                return null;

            total += score.Value;
        }

        return total;
    }

    // Обновленная функция для бейджа
    private string GetScoreBadgeClass(int totalScore, int passingScore)
    {
        return totalScore >= passingScore ? "bg-success" : "bg-danger";
    }
}